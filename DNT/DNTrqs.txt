jo;Empty project withh MVC references selected in template

RouteConfig class in App_start folder Then called in Application start method of Global.asax.cs

What is modules ,Handlers in MVC

Package.config- all package version details

When adding first view missing packages Bootstrap and jquery are added in the project automatically

Nuget is the package manager

All the public methods in mvc controller are action method(even without actionresult return type)- can be called as get request

Toavoid mishandling, non action methods must not be public or mention as NONAction attribute

we need add Entitiy framework pkg in UI project and add connectionstring details in UI project.because after all only DAL layer dll is added in UI project and It uses the host project configurations only 

Isunicode(false) in CF fluent api - reject/wot store non english characters like not N''

Setting relationship between entities - in fluent api 1 to many , always start from  child entity to create relationship statement

Calling existing sp and sqlfunc in CF as method with Datatbase.sqlquery statment returning typed result

Repository design pattern - minimize duplicate query logic and SOC - application need not know about datasource and additionally access logic and allow unit testing 

Repository implemenetation will be implemeneted in ways - Generic(Add,remove ,find,delete, getall) and specific inheriting generic(entity specific like top some.. get some) 

Entities model and Viewmodel can be placed in separate project

Repository abstration and implementation can be separate project

Repository pattern- dbset
UnitofWork - DbContext - Intialize DbContext and Commiting changes in single place

IOC- Inversion of normal programming(giving objects in needed place instead of creating there )

IOC Implmentation pattern - Service locator, event,delegate ,Dependency injection

Dependency Injection - Constructor injection(passing dependency in constructor),Property setter injection(passing dependency as property value),Method injection (passing dependency as method argument)

Dependency injection is implemented in realtime using IOC containers(pass objects at run time and maintains lifetime of dependency objects) like Unity,Castle windsor,structure map,Ninject


Absratract and other design patterns vs Repo and unit of work
How asp.net  mvc with ang riuting show demo

Conditional Layout can be done in Layout page - based on reading the routedata values in Layout page
RouteData is a property of base Controller class, so RouteData can be accessed in any controller. RouteData contains route information of a current request. You can get the controller, action or parameter information

public ActionResult Index(int? id, string name, int? standardId)
    {
        var controller = RouteData.Values["controller"];
        var action = RouteData.Values["action"];          
        id = (int)RouteData.Values["id"];
        name = (string)RouteData.Values["name"];
        standrdId = (int)RouteData.Values["standardId"];
        var area = RouteData.DataTokens["areaname"];
        return View();
    }


ViewStart.cshtml - Can be used for writing some csharp code for page initialization like setting Layout= variable

Viewlevel Web.config - will contain required csharp and other namespaces, we can add our Custom helper namespaces if required

MVC vs 3Tier - Tier refer/;s to individual Hosted application and Layer refers to BL,DAL,PL

Architectural Pattern[High level - MVC MVVM SOA REST] vs Design Pattern[Code or Component level - Singleton,Abstract design on how the objects are created and maintaned]

We can have multiple routes type in RouteConfig class.Routes will be taken in the order mentioned.

We can use both conventional routing and Attribute[Route("~/Controllername/ActionName/{id}/{catid}")-This can be user defined pathwkh] routing in MVC .To enable attribute routing in MVC , configure it by adding routes.MapMVCAttributeRoutes  in Routingconfig

We can use manual modelstate.Addmodelerror("modelprop","err msg") for each property on post request for forma validations in case if DataAnnotations usage is difficult in some cases like for Boolean type property we can utilize adding modelstate error manually 

Extension methods in C# - like static class with static method.

HTML name attribute is used to post and read data for any language/technology ..php,mvc,webform . Id attribute can used at client side for DOM manipulations. If there are more than one element with same name then we read data as like string[] name at server side to get data from same name array

EditorFor is Templated HTML helper which automtically find datatype from DataAnnotations of property.DataType works with only Templated helper. 

We can create Custom HTML Submit button

We can implement Custom validation attribute by inheriting Valifation attributr class. This will need server side postback for validation to happen and auto hide of validation message on typing wont happen. so for this, Microsoft has provided client side validation nuget packages from jqueryvalidation(jquery.validate.min.js) and Microsofts own libraray(jquery.validate.unobtrusive.js). Thes will help Datatannotation validation to happen in client side itself.But still some controls like check box wont happen at client side, for that we need to implement one more claass in our custom validation for checkbox ie..IClientValidatable and implement its method.
Addition we need to use jquery validations adaptor in the page in separate script block .Please refer practice solution for detail

Inline html helpers - @helper can be used to write C# methods in .cshtml page

Entity Framework::::::::::::::

Navigation property(public Category Category{get;set;}) can be used to link 2 tables using Foriegn key as Annotation by mention Foreignkey column in argument

In Context class , pass the connection string in base class constructor(DbContext)

If navigation property is declaredf as virtual then Lazy loading is enabled, other wise we cant use lazy loading and it will cause exception

EF Fluent API::::::::::::::

We can use OnModelCreating method override to define relationship between entities. virtual ICollection is used in defining navigation proper.ties and its relation ship . Make relation ship from child table to Parent table in Fluent api.

Can define composite primary key as like .HasKey(p=> new {p.UserId,p.Name})
Can mention proprty with varchar type as .HasColumnType("varchar") or .IsUnicode(false)
Its recommended to generate scripts in migration and share the scripts to DBA for DB changes
Can also rollback to previous state-> update-database -TargetMigration:"migrationid" -verbose -script

Design Pattern:::::::

Repository Design Pattern - Abstract layer between data and domain layer. Decouples the application from Persistence framework EF,Dapper.. and minimize query logic . Allows unit testing as the repositories are bound to interface which can be injected in class at run time.

UnitOfWork - Creates/manage instance for each repository(generic or specific) and set db context

IOC - DI Implementation of IOC
Contructor(Pass dependency as constructor arg),Property(Pass/assign dependency as property without need to initialize client class each time),Method(Specific dependency in some methods- can use this)

In Practical IOC Containers(IOC Container Framework) are used for registering and getting instance of dependency and managing lifetime of objects.IOC Containers like Unity,Castle windsor,Ninject ,StructureMap etc..

In our case , we are using Unity Container - Add Nuget pkg for Unit.MVC5.. It will add Unity config to register dependencies in one place. The Unit Config file need to be registered in Global.asax.cs file.

Using Coontainers now, we dont need explicit  instatiation of objects inside construction or any direct reference of object, just the interface is enough.

TDD Approach(MS Test Framework used) ::::::::::::: Test cases are written before the actual code being written.To pass the Test case code will be written. Then Refactor the code to improve code quality.
It follows below flow
Write Failing test->Write code to pass test->Refactor to improve code quality
A:Arrange - Initializations
A:Action - Perform test
A:Assert - Verify Result

There is test menu in VStudio for Test project , can use to run tests.
TDD helps in FASTER DEBUGGING(Understood that we call and test anymethod in Test project , will help a lot clearly in confirming the functionality)

Mocking FRamework(Moq)- Create Fake objects for testing . Can intercept the The object and return fake method results for testing to avoid database hit.Mock<IUnitOfwork> obj;

Typescript::::::::::
Install Node(JS Runtime env) 
Install - NPM install typescript 
We can call js file directly in node as like - node variable.js or node variable . It will write reults in cmd
Install angularcli in node

Angular App:::::::::::::
List of Angular CLI commands for Angular project and building block creation - like ng new appname --skip-install --routing , ng g c componentname
Tslint.json file will have rules on Angular projects formatting related and more

Module VS Directive ????

On successfully building the application, angular will create bundle js files like main.js,polyfills.js etc.....

Angular Initilization Process => Main.ts will have the application startup settings which in turn contain the main/app module details which in turn will have Component , Directive and Pipes details which in turn have its Views running within in Main component view which is inside the master view(index.html)

Angular Building blocks => Module,componenets(Initialized by Angular DI Engine),Templates,Metadata,Data Binding ,Directives,Pipes,Routing,Forms,Services,Dependency Injection

ng new myapp --routing --skip-install [Creates angular project with routing configuration enabled and skip angular inbuilt  modules installations]

We can install Botstrap 4 snippets extension in VSCode

main.ts will contain bootstrapmodule as an argument in bootstrapmodule() method which is Appmodule.. Appmodule is the startup module and it will contain bootstrap component which is AppComponent

Twoway Databinding , we can use only if we import FormsModule in Appmodule

Inheritance(Component), Component Life cycle Hooks(ngOnInit,ngOnChanges),Component Metadata

Inheritance Component:
Inherites all events ,contructor of parent if we didnt intialize separately in the child component class.
We can intialize parent component class from clid using super() with arguments

Refer the Shailendra pdf for Databindings in Angular

Parent to Child Data transfer needs @Input decorator
Child to Parent Data transfer needs @Output decorator of type EventEmitter<type>, we use event here to pass the data.

Component Life cycle hooks:
Constructor- class member intilization
ngOnChnages - fire this event when @Input decorator changes from parent to child
ngOnInit - like Page_load method , can use to do some intilization before component load like api calls
ngDoCheck - fires this event wheneveer there is change made in template/DOM
ngAfterContentInit
ngAfterContentChecked
ngAfterViewInit
ngAfterViewChecked
ngOnDestroy - like Destructor in a class to release some resources from component

Angular Forms:
We can use angular packages/3rd party modules for validatons like for passowrd comparer - angular-text-equality-validator

ng build --watch to ompile the ts files for every change aitomatically

Can ask queries on service consumption in comparison with C# consumption

Areas are modules in MVC with its own structure.Arearegistration.cs file for each area will have its own routing details

What is FormsAuthentication and how it works,what is custom proncipal,cart service explanation needed

What is the use of namespace in routeconfig namespaces: new[] { "MVCApp.Controllers" } parameter in Maproute extension method

What/Purpose of  is CustomPrincipal containing all UserModel properties

How this works and what it does - Application_PostAuthenticateRequest method explanation in Global.asax

FormsAuthentication.FormsCookieName   FormsAuthenticationTicket information needed on it usage

When abstract class is inherited , it doesnt need to be implemented

How Area parameter is utilized in RouteValueDictionary(new { controller = "Account", action = "Login", area = ""

How Ticket to Authentication to Authorization flows